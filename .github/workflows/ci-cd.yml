name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run tests
      run: |
        cd backend
        npm test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: backend/coverage

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.backend
        tags: todo-backend:${{ github.sha }}
        outputs: type=docker,dest=/tmp/backend.tar
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.frontend
        tags: todo-frontend:${{ github.sha }}
        outputs: type=docker,dest=/tmp/frontend.tar
    
    - name: Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-image
        path: /tmp/backend.tar
    
    - name: Upload frontend artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-image
        path: /tmp/frontend.tar

  terraform-plan:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init
    
    - name: Terraform Validate
      run: |
        cd infrastructure
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -no-color
      env:
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

  deploy:
    needs: [build, terraform-plan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Deploy Infrastructure
      run: |
        cd infrastructure
        terraform init
        terraform apply -auto-approve
      env:
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    - name: Deploy Application
      run: |
        echo "Application deployment would happen here"
        echo "This could involve updating EC2 instances, ECS services, etc."

